// Generated by gencpp from file yolo_node/detection_info.msg
// DO NOT EDIT!


#ifndef YOLO_NODE_MESSAGE_DETECTION_INFO_H
#define YOLO_NODE_MESSAGE_DETECTION_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace yolo_node
{
template <class ContainerAllocator>
struct detection_info_
{
  typedef detection_info_<ContainerAllocator> Type;

  detection_info_()
    : header()
    , class_type()
    , score()
    , x1()
    , x2()
    , y1()
    , y2()  {
    }
  detection_info_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , class_type(_alloc)
    , score(_alloc)
    , x1(_alloc)
    , x2(_alloc)
    , y1(_alloc)
    , y2(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _class_type_type;
  _class_type_type class_type;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _score_type;
  _score_type score;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _x1_type;
  _x1_type x1;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _x2_type;
  _x2_type x2;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _y1_type;
  _y1_type y1;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _y2_type;
  _y2_type y2;





  typedef boost::shared_ptr< ::yolo_node::detection_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yolo_node::detection_info_<ContainerAllocator> const> ConstPtr;

}; // struct detection_info_

typedef ::yolo_node::detection_info_<std::allocator<void> > detection_info;

typedef boost::shared_ptr< ::yolo_node::detection_info > detection_infoPtr;
typedef boost::shared_ptr< ::yolo_node::detection_info const> detection_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yolo_node::detection_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yolo_node::detection_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace yolo_node

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'yolo_node': ['/home/erlendb/Programmering/PCL/kinect_ws/src/yolo_node/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::yolo_node::detection_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yolo_node::detection_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolo_node::detection_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yolo_node::detection_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolo_node::detection_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yolo_node::detection_info_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yolo_node::detection_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea2d9911aca1cdbc2e7d80a7846b80e6";
  }

  static const char* value(const ::yolo_node::detection_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea2d9911aca1cdbcULL;
  static const uint64_t static_value2 = 0x2e7d80a7846b80e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::yolo_node::detection_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yolo_node/detection_info";
  }

  static const char* value(const ::yolo_node::detection_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yolo_node::detection_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
string[] class_type\n\
float32[] score\n\
int16[] x1\n\
int16[] x2\n\
int16[] y1\n\
int16[] y2\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::yolo_node::detection_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yolo_node::detection_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.class_type);
      stream.next(m.score);
      stream.next(m.x1);
      stream.next(m.x2);
      stream.next(m.y1);
      stream.next(m.y2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct detection_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yolo_node::detection_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yolo_node::detection_info_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "class_type[]" << std::endl;
    for (size_t i = 0; i < v.class_type.size(); ++i)
    {
      s << indent << "  class_type[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.class_type[i]);
    }
    s << indent << "score[]" << std::endl;
    for (size_t i = 0; i < v.score.size(); ++i)
    {
      s << indent << "  score[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.score[i]);
    }
    s << indent << "x1[]" << std::endl;
    for (size_t i = 0; i < v.x1.size(); ++i)
    {
      s << indent << "  x1[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.x1[i]);
    }
    s << indent << "x2[]" << std::endl;
    for (size_t i = 0; i < v.x2.size(); ++i)
    {
      s << indent << "  x2[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.x2[i]);
    }
    s << indent << "y1[]" << std::endl;
    for (size_t i = 0; i < v.y1.size(); ++i)
    {
      s << indent << "  y1[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.y1[i]);
    }
    s << indent << "y2[]" << std::endl;
    for (size_t i = 0; i < v.y2.size(); ++i)
    {
      s << indent << "  y2[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.y2[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // YOLO_NODE_MESSAGE_DETECTION_INFO_H
